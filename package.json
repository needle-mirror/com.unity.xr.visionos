{
  "name": "com.unity.xr.visionos",
  "displayName": "Apple visionOS XR Plugin",
  "version": "2.0.0-pre.11",
  "unity": "6000.0",
  "unityRelease": "0b16",
  "description": "Provides support for Apple visionOS XR features. This includes build post-processing code and the following subsystem implementations:\n  - XRSessionSubsystem\n  - XRDisplaySubsystem\n  - XRInputSubsystem\n  - XRMeshSubsystem\n  - XRPlaneSubsystem\n  - XRImageTrackingSubsystem\n  - XRAnchorSubsystem\n  - XRHandSubsystem\nUnity PolySpatial and visionOS support is only available to Unity Pro, Unity Enterprise, and Unity Industry users. Learn more about these plans at unity.com/pricing.",
  "keywords": [
    "xreditorsubsystem"
  ],
  "dependencies": {
    "com.unity.xr.core-utils": "2.3.0",
    "com.unity.xr.arfoundation": "6.0.1",
    "com.unity.xr.management": "4.3.3"
  },
  "_upm": {
    "changelog": "### Added\n- Exposed `SkipPresentToMainScreen` setting in `VisionOSSettings`. This will be enabled by default, along with a Project Validation rule to encourage its use, on Unity 6000.0.11f1, which includes fixes for this mode. This version of Unity fixes frame pacing issues for visionOS apps using Metal rendering, along with a GPU resource leak related to this setting.\n- Added `VisionOS.SetMinimumFrameRepeatCount` API to enable content that can't hit 90hz to ask for more time to render each frame.\n- Added Initial Target Frame Rate runtime setting which sets `Application.targetFrameRate` and `VisionOS.SetMinimumFrameRepeatCount` at start-up based on the selected option.\n- Added more details to Metal App Mode documentation page, including how to set up pass-through in Metal-based apps. \n\n### Changed\n- Use new `cp_frame_binocular_frustum_matrix` API to query a proper culling matrix from the system. 2.0.0-pre.9 used a hard-coded 150-degree FOV to ensure nothing was culled prematurely, but may have regressed performance due to more objects being considered \"in-view\" than was necessary.\n\n### Deprecated\n\n### Removed\n\n### Fixed\n- Wrap all MonoPInvokeCallback methods in try/catch to avoid potential crashes in player builds.\n- Fixed potential exceptions in OnAuthorizationChanged that can happen if the original call was made off the main thread.\n- Fixed an issue where the app can crash if the AR Session is restarted when rendering with Metal. This may also fix other Metal rendering crashes accompanied by error logs that start with `BUG IN CLIENT:`.\n- Fixed an issue where visionOS player builds can crash when trying to collect crash logs.\n\n### Security"
  },
  "upmCi": {
    "footprint": "97c03f0f50d3060921c3857904cdca39dfec306a"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.xr.visionos@2.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/quantum.git",
    "type": "git",
    "revision": "9255a4b6650a862594a9b963faf0a11de18c619b"
  },
  "samples": [
    {
      "displayName": "Metal Sample - Built-in",
      "description": "A sample scene and supporting assets for the built-in render pipeline demonstrating Metal app mode features. This sample requires the XR Interaction Toolkit to be added to your project.",
      "path": "Samples~/MetalSampleBuiltin"
    },
    {
      "displayName": "Metal Sample - URP",
      "description": "A sample scene and supporting assets for the Universal Render Pipeline demonstrating Metal app mode features. This sample requires the XR Interaction Toolkit to be added to your project.",
      "path": "Samples~/MetalSampleURP"
    }
  ]
}
